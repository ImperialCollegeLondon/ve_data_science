{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Virtual Ecosystem data science repository","text":"<p>This is an initial landing page for the Virtual Ecosystem data science repository. As more content moves into these documents, this page will be expanded to give an overview.</p> <p>Links:</p> <ul> <li>Using GLOBUS</li> </ul>"},{"location":"getting_started/","title":"Getting started with the <code>ve_data_science</code> repository","text":"<p>Important</p> <p>This is a draft document</p> <p>This is a how to guide to getting started with the <code>ve_data_science</code> repository</p>"},{"location":"getting_started/#getting-the-repository","title":"Getting the repository","text":"<p>The first step is to clone the repository. If you do not already have <code>git</code> then you will need to install it:</p> <p>https://git-scm.com/downloads</p> <p>Next, in your terminal, change directory to the location where you want the repository to live and then run the following command.</p> <pre><code>git clone https://github.com/ImperialCollegeLondon/ve_data_science.git\n</code></pre> <p>That will create a new directory called <code>ve_data_science</code> that contains all of the current files, all of the changes ever made to those files. It also contains the details of all of the branches containing active versions of the code that differ from the core <code>main</code> branch. Those changes are hidden away in the <code>.git</code> folder.</p> <p>See the GitHub Overview for details on working with Git and GitHub.</p>"},{"location":"getting_started/#setting-up-the-repository-for-use","title":"Setting up the repository for use","text":"<p>However, we use a number of quality assurance tools (QA) to help manage the code files and documents within this repository. You also need to do the following to get this set up working and make the most of working with VSCode, if that is the editor tool you want to use.</p> <ol> <li> <p>Install python if needed. You probably already have this since it is needed to run    <code>virtual_ecosystem</code>!</p> </li> <li> <p>Install <code>poetry</code>. This is a python package manager, which we are using here to    maintain a set of Python tools that are likely to be used within the project. Follow    the command line instructions on the poetry installation page.</p> </li> <li> <p>In the command line, run <code>poetry install</code>. This will install the recommended python    packages, which includes the <code>radian</code> front-end for R, the <code>xarray</code> package for    handling NetCDF data and the <code>pre-commit</code> framework for running code quality checks    on changes being committed to the repository. The <code>poetry</code> tool creates a new Python    environment that is specific to this project.</p> </li> <li> <p>If you are using Visual Studio Code, then it needs to know which python setup to use    for running Python code and for running Python code quality tools. This is done by    setting the Python interpreter path to match the one that <code>poetry</code> just created:</p> <ul> <li>Run <code>poetry env list --full-path</code>, copy the result and then either add   <code>/bin/python</code> (on MacOS or Linux) or <code>\\Scripts\\python.exe</code> (on Windows) to the   end. For example:   <code>/Users/dorme/Library/Caches/pypoetry/virtualenvs/ve-data-science-ND1juKN--py3.12/bin/python</code></li> <li>In the VSCode menus, select View &gt; Command Palette and then enter <code>interpreter</code> in   the box to find the <code>Python: Select Interpreter</code> command. Click on <code>Enter   interpreter path</code> and paste in the path from above.</li> </ul> </li> <li> <p>You now need to setup the <code>pre-commit</code> tool, which is used to run a standard set of     checks on files when <code>git commit</code> is run. At the command line, enter:</p> <p><code>poetry run pre-commit install</code></p> <p>This command can take quite a long time to run - among other things, it is installing a separate version of R just to be used for file checking!</p> </li> <li> <p>If you do not have R 4.4 installed, you will now need to install it.</p> </li> <li> <p>You now need to configure VSCode to work with R. This involves changing some of the    settings so that it [TBD]</p> </li> </ol>"},{"location":"github_overview/","title":"Github Overview","text":"<p>Important</p> <p>This is currently a draft document</p> <p>Github is an online platform for code sharing and collaboration. Multiple developers can work on a project at once, make changes on their own copy of the code (called a \"branch\"), get feedback on the changes from other team members, and then \"merge\" their changes into the core code-base. This page walks you through basic git and github functionality used for the project.</p>"},{"location":"github_overview/#lingo","title":"Lingo","text":"<ul> <li>Repository (repo): the codebase.</li> <li>Branch: a copy of the codebase where local changes don't immediately impact the   main branch</li> <li>Commit: a package of changes that you're satisfied with, and then group them   together and label with a description.</li> <li>Pull request: a functioning chunk of code that can be safely merged into the main   codebase without breaking any other functionality</li> <li>Push: send your commits to the upstream version of your branch (the online   version)</li> </ul>"},{"location":"github_overview/#getting-started","title":"Getting started","text":"<ol> <li>Make a github account and login.</li> <li>Find the repository that you want to work on. Click on the green \"code\" button and    copy the link under clone.<ul> <li>If your github account usees two-factor authentication or single sign-on you will   need to use the SSH version, otherwise you can use HTTPS.</li> <li>If you use the SSH version, your computer will need to communicate with github   automatically to authenticate you when you make changes from your desktop. To do   this you need to generate a SSH key and add it to your GitHub   account.</li> </ul> </li> <li>Decide where you want the repo to be stored on your local computer. Open a terminal    window and navigate to this location (<code>cd FOLDERNAME</code> moves you into a folder, and    <code>cd ..</code> moves you backwards.)</li> <li>Once you have found the folder, paste <code>git clone SSH/HTTPS REPO URL</code> into the    terminal. This should download a copy of the up-to-date code into your local    computer.</li> <li>Open VS Code (or another processor such as PyCharm) and open the folder that you just    downloaded.</li> </ol> <p>You can now add files, make changes, and work on the codebase. Once you're ready to share those changes, go to the next section!</p>"},{"location":"github_overview/#checkout-a-new-branch","title":"Checkout a new branch","text":"<p>By default, when you download the code you will be on the main branch. This branch includes all the approved code. Never work directly on the main branch - you should always create your own branch, and merge it into main only later once the code is ready and has received approval.</p> <ol> <li>Check what branch you're on. VS Code has the name of the branch in the bottom left,    or you can run <code>git branch</code> in the terminal.</li> <li>Pull the most recent version of main. Before you create a new branch, make sure your    main is up-to-date. This will be the copy of the code that you start from. To pull,    use the refresh button in the bottom left of VS Code, or run <code>git pull</code> in the    terminal.</li> <li>Create a new branch. You can create a new branch in VS Code by clicking on the branch    name and then the \"Create a new branch...\" option that should show up. Otherwise, run    <code>git checkout -b BRANCH NAME</code> in the terminal. Your branch name doesn't need to be    long, but should be descriptive enough so that you remember what you're doing on it    in case you switch between branches.</li> </ol>"},{"location":"github_overview/#commit-and-push-your-code","title":"Commit and push your code","text":"<p>Committing your code is a way to package up some changes that should all be logically grouped together and describing what you've done. A commit is a helpful way for other developers to quickly look at the change you've made with the intention you had, so that they can easily review the changes.</p> <ol> <li>First, check exactly what changes git has tracked. This ensures that you don't commit    anything you don't mean to (like old work, commented out code, etc.) You can do this    in VS Code in the \"Source Control\" tab. Anything labelled \"changes\" is work that    hasn't yet been marked as ready to add to a commit. Anything labeled \"staged changes\"    includes work that you have indicated is ready to commit, but has not yet been    committed.</li> <li>Check over your changes and stage them. Click on the files under changes and look    through what has been added (will be noted with blue highlight next to the line    numbers). As long as you are happy, you can stage the changes by clicking the \"+\"    button next to the file.</li> <li>Once you are ready to commit all your staged changes, press the blue commit button.    This will open a new file where you can type a commit message (a brief description of    what work has been done). Then, click the check mark button.</li> <li>Push your changes to github. To send your changes to github, press the \"publish\"    button. This sends a copy of the work on your branch to github, so anyone can see    what you have been doing.</li> </ol> <p>You can also perform these tasks from the terminal window if you prefer. Some basic commands are <code>git status</code> to see what branch you're on and what files have changed; <code>git diff</code> to see what your changes are; <code>git add FILENAME</code> to stage changes in that file; <code>git commit -m COMMIT MESSAGE</code> to commit all the staged changes; and <code>git push</code> to push your changes to github.</p>"},{"location":"github_overview/#creating-a-pull-request-and-merging","title":"Creating a pull request and merging","text":"<ol> <li> <p>Once you are ready for a code review (and ultimately for your code to be merged into    the main branch), go on github and create a pull request (PR). You can do this from    the pull request tab, or if you've recently pushed from a local branch, github will    prompt you to make a PR from that branch. When you're making a PR, you want to merge    your branch into main.</p> </li> <li> <p>Add a description of what the PR accomplishes and request review from the relevant    team members.</p> </li> <li> <p>Wait for the reviews to come in: it makes life hard for reviewers if there are more    changes coming into a PR while they are trying to review it!</p> </li> <li> <p>Respond to reviews. Your reviewers can either give approval or request changes. Even    if they approve the PR, they may also make some comments for minor changes, so before    merging (see below) you should go through any comments in the review and deal with    them. Typical actions are:</p> </li> <li> <p>Making some additional changes on the branch to address the comment and then      commiting and pushing those changes.</p> </li> <li> <p>Accepting a \"suggestion\"  -  this option appears when a reviewer has posted some      actual changes, a bit like a suggestion in track changes in Word, rather than a      comment about what they would like you to change. You can accept suggestions      directly in GitHub but will then need to use <code>git pull</code> to bring those suggestions      into your local copy</p> </li> <li> <p>Simply replying to the comment - it might be that the comment just wanted      clarification without needing to changes anything, or it might be that there are      good reasons not to do what the comment asks. This might involve a short discussion      before deciding on what to do.</p> </li> </ol> <p>When a comment has been handled, it is good practice to leave some form of comment:    that could just be a simple \"thumbs up\" reaction for simple changes or could be a few    sentences explaining what you've done. You should click on the \"resolve conversation\"    button when there is no further action to be taken.</p> <p>If a reviewer has requested changes, you will need to request a new review from that    reviewer to get them to approve the update PR.</p> <ol> <li>Once you have approvals from all reviewers, you can merge from the PR page, which    sends your updates into the main branch. If the main branch has changed since you    started your branch and PR, you may need to update the branch before you can merge.</li> </ol>"},{"location":"github_overview/#start-it-all-over","title":"Start it all over","text":"<p>Once you complete your task and are ready for the next one, you can start the process over. A few things to remember...</p> <ul> <li>Always create new branches off of main. Go into VS Code (or the terminal) and switch   to the main branch. Pull the latest version before creating a new branch.</li> </ul> <p>TODO</p> <p>Handling merge conflicts</p>"},{"location":"uploading_r_scripts/","title":"Uploading an R Script to a GitHub Repository","text":"<p>(This text was written by @arne-exe and is copied directly from https://github.com/ImperialCollegeLondon/ve_data_science/issues/22#issuecomment-2740835471)</p> <p>These notes should help guide you through uploading an R script to a GitHub repository using Git, Visual Studio Code (VSC), and best practices for version control, branch management, and code formatting</p>"},{"location":"uploading_r_scripts/#prerequisites","title":"\u2705 Prerequisites","text":"<p>Before you start, make sure you have the following in place:</p> <ul> <li>Git is installed and configured</li> <li>You have access to the ve_data_science GitHub repository</li> <li>R (at least version 4.4.2) is installed and added to your system PATH</li> <li>Visual Studio Code (VSC) is installed, with Git integration enabled</li> <li>Pre-commit hooks are installed</li> </ul>"},{"location":"uploading_r_scripts/#1-create-a-github-issue","title":"1\ufe0f\u20e3 Create a GitHub Issue","text":"<ul> <li>In your GitHub repository, create a new Issue describing your task, e.g.,   \"Uploading script X\". This helps track your work and adds context for   collaborators.</li> </ul>"},{"location":"uploading_r_scripts/#2-prepare-your-local-repository","title":"2\ufe0f\u20e3 Prepare Your Local Repository","text":"<ul> <li>Clone the repository (if not done already).</li> <li>Navigate into the cloned folder and open it in Visual Studio Code</li> <li> <p>Check the status of the repository and update it from the remote repository</p> <pre><code>git status\ngit fetch\ngit pull\n</code></pre> <p>These commands ensure your local <code>main</code> branch is up to date.</p> </li> </ul>"},{"location":"uploading_r_scripts/#3-create-a-new-branch","title":"3\ufe0f\u20e3 Create a New Branch","text":"<p>Create a new branch for your changes:</p> <pre><code>git checkout -b meaningful-branch-name\n</code></pre> <p>Use a descriptive name like <code>uploading_t_model_parameters_script</code>, not a generic name like <code>my_feature_branch</code>.</p>"},{"location":"uploading_r_scripts/#4-make-your-changes","title":"4\ufe0f\u20e3 Make Your Changes","text":"<ul> <li>Create any new folders under <code>data</code> or <code>analysis</code>.</li> <li>Use the template scripts provided in the repository.</li> <li>Move your R script into the appropriate folder.</li> <li>Ensure local datasets are placed in correct subfolders within <code>data/</code>.</li> </ul>"},{"location":"uploading_r_scripts/#5-stage-and-commit-changes","title":"5\ufe0f\u20e3 Stage and Commit Changes","text":"<p>Check what\u2019s changed:</p> <pre><code>git status\n</code></pre> <p>Stage your files:</p> <pre><code>git add path/to/script.R\n</code></pre> <p>Commit your changes:</p> <pre><code>git commit -m \"Uploading script X\"\n</code></pre>"},{"location":"uploading_r_scripts/#6-handle-pre-commit-checks","title":"6\ufe0f\u20e3 Handle Pre-commit Checks","text":"<p>If the commit fails due to pre-commit hook issues then fix the issues, re-add the updated files and re-commit the changes. Some common problems and fixes:</p> Error Solution Rscript not found Add R to system environment PATH Lintr style issues Follow suggested fixes or use # nolint where appropriate Variable/function names too long Rename using snake_case, max 30 characters Lines &gt; 88 characters Reformat or split lines carefully <p>Tip</p> <p>Use VS Code's syntax highlighting and Ctrl + Click to quickly navigate and fix code issues.</p>"},{"location":"uploading_r_scripts/#7-push-your-branch","title":"7\ufe0f\u20e3 Push Your Branch","text":"<p>Once your commit passes:</p> <pre><code>git push -u origin your-branch-name\n</code></pre>"},{"location":"uploading_r_scripts/#8-create-a-pull-request-pr","title":"8\ufe0f\u20e3 Create a Pull Request (PR)","text":"<ul> <li>Go to your GitHub repo</li> <li>Click \"Compare &amp; pull request\"</li> <li>Add a title and description</li> <li>Assign reviewers and submit</li> </ul> <p>Tip</p> <p>Any new commits pushed to this branch automatically update the same PR \u2014 no need to create a new one.</p>"},{"location":"uploading_r_scripts/#9-address-review-feedback","title":"9\ufe0f\u20e3 Address Review Feedback","text":"<p>If your reviewer suggests changes:</p> <p>Edit your script locally (while still being on the same branch) Commit and push again:</p>"},{"location":"uploading_r_scripts/#on-relative-paths","title":"On Relative Paths","text":"<p>Avoid hardcoded system paths like <code>C:/Users/...</code>. Use relative paths:</p> <pre><code>data &lt;- readxl::read_excel(\n    \"../../../data/primary/plant/tree_census/tree_census_11_20.xlsx\"\n)\n</code></pre> <ul> <li><code>../</code> moves one directory up.</li> <li>Always ensure you're working in the correct working directory (e.g., by opening the   script directly or by setting the working directory manually).</li> </ul>"},{"location":"uploading_r_scripts/#final-merge-cleanup","title":"\ud83d\udd10 Final Merge &amp; Cleanup","text":"<p>Once the PR is approved</p> <ul> <li>Merge it via GitHub</li> <li>Update your local <code>main</code>:</li> </ul> <pre><code>git checkout main\ngit pull origin main\n</code></pre> <ul> <li>Clean up your feature branch (optional):</li> </ul> <pre><code>git branch -d your-branch-name\n</code></pre>"},{"location":"uploading_r_scripts/#collaboration-best-practices","title":"\ud83e\udd1d Collaboration Best Practices","text":"<ul> <li>Always pull latest changes before starting new work</li> <li>Keep commits clear and descriptive</li> <li>Never push directly to <code>main</code></li> <li>Communicate clearly in PRs and commit messages</li> <li>Ask for help if <code>lintr</code> feedback is confusing \u2014 even paste the code into ChatGPT   for help!</li> </ul>"},{"location":"using_globus/","title":"Using GLOBUS","text":"<p>We are using the GLOBUS system to curate the data used in the Virtual Ecosystem data science repository.</p> <ul> <li>All paths to data files within the repository should be relative paths to a data file   location in the <code>data</code>  directory.</li> <li>However, to avoid adding large and/or binary data files to the GitHub repository   itself, the contents of the <code>data</code> directory are managed using GLOBUS.</li> </ul> <p>At any point, we should be able to re-run analyses by cloning the code from the GitHub repository and then populating the <code>data</code> directory using GLOBUS.</p>"},{"location":"using_globus/#globus-overview","title":"GLOBUS Overview","text":"<p>GLOBUS is a web-based system that provides access to data files.</p> <ul> <li> <p>GLOBUS does not store the files itself - it is not cloud storage - but it   provides configured connections to data in existing networked storage.</p> </li> <li> <p>GLOBUS also manages access privileges and authentication to connect to data: users   register with GLOBUS and can then be granted access to data sets</p> </li> </ul> <p>A single data repository is called a collection. A collection is basically just a configured connection to a particular set of files. Individual users can then be given access to collections. Users can also be made part of a group and that group can be given access to collections.</p> <p>For the VE Data Science team, we are using GLOBUS to connect to a collection of files hosted on the Imperial College London Research Data Store.</p> <p>Once you have logged into the GLOBUS web application, you will end up on a page with a set of different tabs on the left hand side.</p> <p>Access permissions</p> <p>Globus frequently requests extra authentication steps. This is usually when you are accessing a new part of the GLOBUS functionality. It will typically take you to a page with a prompt like \"Session reauthentication required (Globus Transfer)\". The page will then also show your login ID email - this is actually a clickable link to start the authentication for the action and should just complete and take you to the page you were trying to access.</p>"},{"location":"using_globus/#the-collections-tab","title":"The Collections tab","text":"<p>The Collections tab is used to provide an overview of the data collections that you have access to.</p> <ul> <li> <p>Start by opening the Collections tab and then clicking the \"Shared with you\" Button.   The URL   https://app.globus.org/collections?scope=shared-with-me should take you straight to this page.</p> </li> <li> <p>You should see the \"Virtual Ecosystem data science\" collection.</p> </li> <li>If you click on that link, you'll see an unfriendly overview page with collection   details.</li> <li>You should also see a button marked \"Open in File Manager\" - click this!</li> </ul>"},{"location":"using_globus/#the-file-manager","title":"The File Manager","text":"<p>The File Manager tab is used to view the files and folders within a collection and to interact with the data repository. You can access the tab from a particular collection (as above), from the tab button on the left or directly using the URL https://app.globus.org/file-manager</p> <p>Once you have opened a collection in the pane then you should be able to see the files and folders in the collection and can open folders to explore the data.</p> <p>Collection paths</p> <p>When you open the VE Data Science collection, you will see that it shows a path at the top: <code>ve_data_science/data</code>. This is because the collection shares all of the files in our Research Data Store. This includes a clone of the <code>ve_data_science</code> repo but also some other data resources. We are managing access to the files using a GLOBUS group ('VE Data Science team') that only has access to the files under the <code>ve_data_science/data</code> path, so you can't see the other data on that drive.</p>"},{"location":"using_globus/#file-manager-actions","title":"File Manager actions","text":"<p>The bar in the centre of the file manager provides action buttons to work with files and folders.</p> <ul> <li>New Folder, Rename and Delete Selected can be used with any selected    folder or file in the collection.</li> </ul> <p>You'd need a very good reason to rename or delete files in the collection and this    should be done through GitHub and not GLOBUS. If you change the names or files or    folders then this will break any existing scripts that use those files, so if you    want to change or delete file paths, you should create a PR that explains the    rationale for the changes and also updates any affected scripts.</p> <ul> <li>Download and Upload can be used with single files and folders: these allow you   to drop a single file or folder from any location into a folder in the collection or   download a file or folder</li> </ul> <p>These tools may be all you need for day to day work - if you have a few files to upload this may well be what you want to do. However, if you want to upload a more complex set of files or download a large number of files, this is going to be a problem.</p> <p>This is where the Transfer or Sync to... option comes in - it allows files and folders to be copied between two collections. To do so, you need to configure your own computer as a collection.</p>"},{"location":"using_globus/#globus-connect-personal","title":"Globus Connect Personal","text":"<p>The Globus Connect Personal application https://www.globus.org/globus-connect-personal is a local application that you install to your computer that sets up a GLOBUS collection on your computer.</p> <ul> <li>Download and install the program.</li> <li>When you open it for the first time, it will ask you to log in with your GLOBUS   credentials:</li> <li>This will first take you to the GLOBUS website to authorise your GLOBUS account     to create and manage a collection.</li> <li>It will then ask for the collection details to create on your computer.</li> <li>It will then start the Globus Connect Personal application.</li> </ul> <p>If you now go to the web application and look at the collections administered by you, you should see the a new Private Mapped Connection:</p> <p>https://app.globus.org/collections?scope=administered-by-me</p> <p>In the File Manager tab of the web application, you can now select your personal collection and use the File Manager action buttons to manage your files and transfer folders between the two collections.</p> <p>Local file access permissions</p> <p>By default, Globus Connect Personal (GCP) has access to your home directory. Only you have access to the collection, but you can also configure GCP to only be able to access a subset of files. Under the <code>GCP &gt; Preferences</code> settings, you can select the Access tab and specify which files GCP can access and whether GCP is allowed to write to those folders.</p> <p>Within the GLOBUS web application, you can also check the visibility of your local collection through the Collections tab: click your local collection and then explore the visibility options to check if other users can see the existence of your collection.</p>"},{"location":"using_globus/#the-globus-transfer-system","title":"The GLOBUS Transfer system","text":"<p>Transfer is used to copy files from a source collection to a destination collection. Here, you could be uploading a folder from your personal collection (source) to the RDS repo (destination) or downloading data from the RDS (source) to your local collection (destination) for analysis. Or possibly doing both to synchronise the two folders!</p> <p>To transfer files or folders between collections:</p> <ul> <li>Select the files or folders on the source collection</li> <li>In the destination folder, open the location where the selected data will be   transferred. Do not_ select the folders or files on the destination but instead   make sure you have the location that you want to copy to open.</li> </ul> <p>For example, if you are synchronising the <code>data/derived</code> data folder, you will need to   select the <code>derived</code> folder in the source collection, but just have the <code>data</code> folder   open in the destination. If you do not do this then the data will be transfered into   the selected folder.</p> <ul> <li>Press the \"Start button\" above the source collection. GLOBUS will schedule and run the   transfer in the background: you can open the activity monitor link to see the progress   of the transfer.</li> </ul>"},{"location":"what_are_those_odd_files/","title":"What are all those odd files?","text":"<p>The <code>ve_data_science</code> repository contains an awful lot of odd files that are used for configuring the data quality and formatting setup of the repositor. The listing below shows all of the key files used to set up the repo and a short description. The list includes 'hidden' files, which start with a dot.</p> File Description <code>.git</code> Used by <code>git</code> to keep track of all of file changes. Ignore it. <code>.github/workflows/ci.yaml</code> Defines a workflow that runs when a pull request is made on GitHub to add changes to the repository. It runs a standard set of checks that  validate the code quality. <code>.gitignore</code> Used to manage a set of files that <code>git</code> should not manage - these files will not be added and any changes will not be tracked. <code>.lintr</code> A configuration file for the R <code>lintr</code> package, used to enforce standard formatting in R files. <code>.markdownlint.yaml</code> A configuration file for the <code>markdownlint</code> tool, used to enforce standard formatting in Markdown files. <code>.pre-commit-config.yaml</code> A configuration file for the <code>pre-commit</code> tool, defining a set of quality checks that are run when <code>git commit</code> is run. <code>.Rprofile</code> A start up file used when R is started in the project. It automatically runs the configuration of the <code>renv</code> R environment manager. <code>.vscode/extensions.json</code> Defines a recommended set of extensions for VSCode <code>.vscode/settings.json</code> Define a recommended set of common settings for VSCode <code>LICENSE</code> The software licence used for the code in the project. <code>poetry.lock</code> A file that records the Python packages being used in the project and the versions being used. <code>pyproject.toml</code> A configuration file used to manage the Python packages used within the project. <code>README.md</code> The main project description details shown on the repository homepage. <code>system_dependencies.R</code> This is used to declare the use of R packages that are used in the repository system and which are not used by actual analytical code."}]}